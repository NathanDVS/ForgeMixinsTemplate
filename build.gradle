buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "spongepowered-repo"
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'

configurations {
    embed
    compile.extendsFrom(embed)
}

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = '1.8'

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

version = "1.8.9"
group = "dev.surge"
archivesBaseName = "Surge"

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = project.mcpVersion
    makeObfSourceJar = false
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

dependencies {
    embed ('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'guava'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand "version": project.version, "mcversion": project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}


mixin {
    defaultObfuscationEnv notch
    add sourceSets.main, "mixins.surge.refmap.json"
}

jar {
    configurations.embed.each { dep ->
        from (project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }

        from (project.zipTree(dep)) {
            include 'META-INF/services', 'META-INF/services/'
        }
    }

    manifest.attributes(
            "FMLCorePluginContainsFMLMod": "true",
            "ForceLoadAsMod": "true",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "MixinConfigs": "mixins.surge.json",
            "FMLCorePlugin": "dev.surge.CorePlugin"
    )
}

shadowJar {
    classifier ""
    exclude "LICENSE.txt", "dummyThing"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives shadowJar
    archives sourcesJar
}
